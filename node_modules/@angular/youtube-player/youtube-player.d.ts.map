{"version":3,"file":"youtube-player.d.ts","sources":["youtube-player.d.ts"],"names":[],"mappingssourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/// <reference types=\"youtube\" />\nimport { AfterViewInit, ElementRef, NgZone, OnDestroy, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\ndeclare global {\n    interface Window {\n        YT: typeof YT | undefined;\n        onYouTubeIframeAPIReady: (() => void) | undefined;\n    }\n}\nexport declare const DEFAULT_PLAYER_WIDTH = 640;\nexport declare const DEFAULT_PLAYER_HEIGHT = 390;\n/**\n * Angular component that renders a YouTube player via the YouTube player\n * iframe API.\n * @see https://developers.google.com/youtube/iframe_api_reference\n */\nexport declare class YouTubePlayer implements AfterViewInit, OnDestroy, OnInit {\n    private _ngZone;\n    /** Whether we're currently rendering inside a browser. */\n    private _isBrowser;\n    private _youtubeContainer;\n    private _destroyed;\n    private _player;\n    private _existingApiReadyCallback;\n    private _pendingPlayerState;\n    private _playerChanges;\n    /** YouTube Video ID to view */\n    get videoId(): string | undefined;\n    set videoId(videoId: string | undefined);\n    private _videoId;\n    /** Height of video player */\n    get height(): number | undefined;\n    set height(height: number | undefined);\n    private _height;\n    /** Width of video player */\n    get width(): number | undefined;\n    set width(width: number | undefined);\n    private _width;\n    /** The moment when the player is supposed to start playing */\n    set startSeconds(startSeconds: number | undefined);\n    private _startSeconds;\n    /** The moment when the player is supposed to stop playing */\n    set endSeconds(endSeconds: number | undefined);\n    private _endSeconds;\n    /** The suggested quality of the player */\n    set suggestedQuality(suggestedQuality: YT.SuggestedVideoQuality | undefined);\n    private _suggestedQuality;\n    /**\n     * Extra parameters used to configure the player. See:\n     * https://developers.google.com/youtube/player_parameters.html?playerVersion=HTML5#Parameters\n     */\n    get playerVars(): YT.PlayerVars | undefined;\n    set playerVars(playerVars: YT.PlayerVars | undefined);\n    private _playerVars;\n    /**\n     * Whether the iframe will attempt to load regardless of the status of the api on the\n     * page. Set this to true if you don't want the `onYouTubeIframeAPIReady` field to be\n     * set on the global window.\n     */\n    showBeforeIframeApiLoads: boolean | undefined;\n    /** Outputs are direct proxies from the player itself. */\n    ready: Observable<YT.PlayerEvent>;\n    stateChange: Observable<YT.OnStateChangeEvent>;\n    error: Observable<YT.OnErrorEvent>;\n    apiChange: Observable<YT.PlayerEvent>;\n    playbackQualityChange: Observable<YT.OnPlaybackQualityChangeEvent>;\n    playbackRateChange: Observable<YT.OnPlaybackRateChangeEvent>;\n    /** The element that will be replaced by the iframe. */\n    youtubeContainer: ElementRef<HTMLElement>;\n    constructor(_ngZone: NgZone, platformId: Object);\n    ngOnInit(): void;\n    /**\n     * @deprecated No longer being used. To be removed.\n     * @breaking-change 11.0.0\n     */\n    createEventsBoundInZone(): YT.Events;\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    /** See https://developers.google.com/youtube/iframe_api_reference#playVideo */\n    playVideo(): void;\n    /** See https://developers.google.com/youtube/iframe_api_reference#pauseVideo */\n    pauseVideo(): void;\n    /** See https://developers.google.com/youtube/iframe_api_reference#stopVideo */\n    stopVideo(): void;\n    /** See https://developers.google.com/youtube/iframe_api_reference#seekTo */\n    seekTo(seconds: number, allowSeekAhead: boolean): void;\n    /** See https://developers.google.com/youtube/iframe_api_reference#mute */\n    mute(): void;\n    /** See https://developers.google.com/youtube/iframe_api_reference#unMute */\n    unMute(): void;\n    /** See https://developers.google.com/youtube/iframe_api_reference#isMuted */\n    isMuted(): boolean;\n    /** See https://developers.google.com/youtube/iframe_api_reference#setVolume */\n    setVolume(volume: number): void;\n    /** See https://developers.google.com/youtube/iframe_api_reference#getVolume */\n    getVolume(): number;\n    /** See https://developers.google.com/youtube/iframe_api_reference#setPlaybackRate */\n    setPlaybackRate(playbackRate: number): void;\n    /** See https://developers.google.com/youtube/iframe_api_reference#getPlaybackRate */\n    getPlaybackRate(): number;\n    /** See https://developers.google.com/youtube/iframe_api_reference#getAvailablePlaybackRates */\n    getAvailablePlaybackRates(): number[];\n    /** See https://developers.google.com/youtube/iframe_api_reference#getVideoLoadedFraction */\n    getVideoLoadedFraction(): number;\n    /** See https://developers.google.com/youtube/iframe_api_reference#getPlayerState */\n    getPlayerState(): YT.PlayerState | undefined;\n    /** See https://developers.google.com/youtube/iframe_api_reference#getCurrentTime */\n    getCurrentTime(): number;\n    /** See https://developers.google.com/youtube/iframe_api_reference#getPlaybackQuality */\n    getPlaybackQuality(): YT.SuggestedVideoQuality;\n    /** See https://developers.google.com/youtube/iframe_api_reference#getAvailableQualityLevels */\n    getAvailableQualityLevels(): YT.SuggestedVideoQuality[];\n    /** See https://developers.google.com/youtube/iframe_api_reference#getDuration */\n    getDuration(): number;\n    /** See https://developers.google.com/youtube/iframe_api_reference#getVideoUrl */\n    getVideoUrl(): string;\n    /** See https://developers.google.com/youtube/iframe_api_reference#getVideoEmbedCode */\n    getVideoEmbedCode(): string;\n    /** Gets an object that should be used to store the temporary API state. */\n    private _getPendingState;\n    /** Initializes a player from a temporary state. */\n    private _initializePlayer;\n    /** Gets an observable that adds an event listener to the player when a user subscribes to it. */\n    private _getLazyEmitter;\n}\n"]}